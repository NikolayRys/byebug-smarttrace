# Common stack frame source analyzer for byebug and pry-byebug

module ByebugZebra
  class Analyzer
    RUBY_DIR   = RbConfig::CONFIG['prefix']
    STDLIB_DIR = Pathname.new(RbConfig::CONFIG['rubylibdir'])

    def initialize(backtrace)
      @backtrace = backtrace
    end

    def analyze(backtrace)
      # TODO: COMPARE BACKTRACES in byebug and pry-byebug
      # if no diff, make it for per frame
    end

    def self.examine_frame(frame)
      # TODO: compare against $LOADED_FEATURES
      # TODO: refactor frame.file to frame_path
      puts 'HERE'
      puts frame.file
      frame_path = Pathname.new(frame.file)

      if frame._binding.nil? # Byebug method, needs generalization
        [:native, frame.file]
      elsif (origin_pair = config.known_libs.detect{|_name, lib_path| belongs_to_path?(frame_path, lib_path)})
        [:lib, origin_pair.first]
      elsif belongs_to_path?(frame_path, config.root)
        [:application]
      elsif (gem_pair = loaded_external_gems.detect{|_name, gem_path| belongs_to_path?(frame_path, gem_path) })
        [:gem, gem_pair.first]
      elsif false # TODO: Add vendor gems detection
        # Detect vendor/bundle gems: https://stackoverflow.com/questions/19961821/why-bundle-install-is-installing-gems-in-vendor-bundle
        [:vendor, 'gem_name']

      elsif false
        # TODO: Add bins detection /Users/nikolay/.rvm/gems/ruby-2.7.2/bin/* (try with https://github.com/rvm/executable-hooks)
        #!/usr/bin/env ruby_executable_hooks
        #
        # This file was generated by RubyGems.
        #
        # The application 'rdoc' is installed as part of a gem, and
        # this file is here to facilitate running it.

      elsif (std_name = detect_stdlib_name(frame_path))
        [:stdlib, std_name]
      elsif belongs_to_path?(frame_path, RUBY_DIR)
        [:core, frame.file]
      else
        [:unknown, frame.file]
      end
    end

    private


    def self.loaded_external_gems
      @loaded_external_gems ||= Gem.loaded_specs.values.reject(&:default_gem?).map{|spec| [spec.name, Pathname.new(spec.full_gem_path)]}
    end


    def self.belongs_to_path?(target_path, root_path)
      # Is exactly this file or is in a subdirectory
      target_path.fnmatch?("#{root_path}{#{File::SEPARATOR}**,}", File::FNM_EXTGLOB)
      # TODO: Check for Windows and Linux
    end

    def self.detect_stdlib_name(frame_path)
      if belongs_to_path?(frame_path, STDLIB_DIR)
        internal_subpath = frame_path.relative_path_from(STDLIB_DIR).to_s
        config.stdlib_names.detect{|name| internal_subpath.start_with?(name)}
      end
    end

    def self.config
      ByebugZebra.config
    end

  end
end
